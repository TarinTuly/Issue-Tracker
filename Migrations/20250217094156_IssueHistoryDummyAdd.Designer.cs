// <auto-generated />
using System;
using Issue.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Issue.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20250217094156_IssueHistoryDummyAdd")]
    partial class IssueHistoryDummyAdd
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Issue.Models.Attachments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("IssueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.ToTable("Attachments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FilePath = "/uploads/error_log1.txt",
                            IssueId = 1
                        },
                        new
                        {
                            Id = 2,
                            FilePath = "/uploads/screenshot_bug.png",
                            IssueId = 1
                        },
                        new
                        {
                            Id = 3,
                            FilePath = "/uploads/stack_trace.log",
                            IssueId = 2
                        },
                        new
                        {
                            Id = 4,
                            FilePath = "/uploads/fix_patch.diff",
                            IssueId = 2
                        },
                        new
                        {
                            Id = 5,
                            FilePath = "/uploads/test_results.pdf",
                            IssueId = 3
                        },
                        new
                        {
                            Id = 6,
                            FilePath = "/uploads/crash_report.txt",
                            IssueId = 3
                        },
                        new
                        {
                            Id = 7,
                            FilePath = "/uploads/debug_log.txt",
                            IssueId = 4
                        },
                        new
                        {
                            Id = 8,
                            FilePath = "/uploads/final_patch.zip",
                            IssueId = 4
                        },
                        new
                        {
                            Id = 9,
                            FilePath = "/uploads/deployment_logs.txt",
                            IssueId = 5
                        },
                        new
                        {
                            Id = 10,
                            FilePath = "/uploads/code_review.docx",
                            IssueId = 5
                        });
                });

            modelBuilder.Entity("Issue.Models.Comments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("IssueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IssueId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Initial issue reported",
                            CreatedAt = new DateTime(2024, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            IssueId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Assigned to developer",
                            CreatedAt = new DateTime(2024, 2, 17, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 2,
                            IssueId = 1
                        },
                        new
                        {
                            Id = 3,
                            Content = "Bug confirmed",
                            CreatedAt = new DateTime(2024, 2, 17, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 3,
                            IssueId = 2
                        },
                        new
                        {
                            Id = 4,
                            Content = "Fix in progress",
                            CreatedAt = new DateTime(2024, 2, 17, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 4,
                            IssueId = 2
                        },
                        new
                        {
                            Id = 5,
                            Content = "Fixed and committed",
                            CreatedAt = new DateTime(2024, 2, 17, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 2,
                            IssueId = 3
                        },
                        new
                        {
                            Id = 6,
                            Content = "Tested and verified",
                            CreatedAt = new DateTime(2024, 2, 17, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 3,
                            IssueId = 3
                        },
                        new
                        {
                            Id = 7,
                            Content = "Deployed to staging",
                            CreatedAt = new DateTime(2024, 2, 17, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 5,
                            IssueId = 4
                        },
                        new
                        {
                            Id = 8,
                            Content = "Issue re-opened",
                            CreatedAt = new DateTime(2024, 2, 17, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            IssueId = 4
                        },
                        new
                        {
                            Id = 9,
                            Content = "Final fix applied",
                            CreatedAt = new DateTime(2024, 2, 17, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 2,
                            IssueId = 5
                        },
                        new
                        {
                            Id = 10,
                            Content = "Closed successfully",
                            CreatedAt = new DateTime(2024, 2, 17, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 4,
                            IssueId = 5
                        });
                });

            modelBuilder.Entity("Issue.Models.IssueHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IssueId")
                        .HasColumnType("int");

                    b.Property<string>("StatusChange")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.ToTable("IssueHistories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChangedAt = new DateTime(2024, 2, 1, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            IssueId = 1,
                            StatusChange = "Opened"
                        },
                        new
                        {
                            Id = 2,
                            ChangedAt = new DateTime(2024, 2, 2, 12, 15, 0, 0, DateTimeKind.Unspecified),
                            IssueId = 1,
                            StatusChange = "In Progress"
                        },
                        new
                        {
                            Id = 3,
                            ChangedAt = new DateTime(2024, 2, 3, 14, 45, 0, 0, DateTimeKind.Unspecified),
                            IssueId = 1,
                            StatusChange = "Resolved"
                        },
                        new
                        {
                            Id = 4,
                            ChangedAt = new DateTime(2024, 2, 4, 9, 10, 0, 0, DateTimeKind.Unspecified),
                            IssueId = 2,
                            StatusChange = "Opened"
                        },
                        new
                        {
                            Id = 5,
                            ChangedAt = new DateTime(2024, 2, 5, 16, 20, 0, 0, DateTimeKind.Unspecified),
                            IssueId = 2,
                            StatusChange = "Closed"
                        },
                        new
                        {
                            Id = 6,
                            ChangedAt = new DateTime(2024, 2, 6, 11, 5, 0, 0, DateTimeKind.Unspecified),
                            IssueId = 3,
                            StatusChange = "Opened"
                        },
                        new
                        {
                            Id = 7,
                            ChangedAt = new DateTime(2024, 2, 7, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueId = 3,
                            StatusChange = "In Review"
                        },
                        new
                        {
                            Id = 8,
                            ChangedAt = new DateTime(2024, 2, 8, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            IssueId = 4,
                            StatusChange = "Opened"
                        },
                        new
                        {
                            Id = 9,
                            ChangedAt = new DateTime(2024, 2, 9, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueId = 5,
                            StatusChange = "Reopened"
                        },
                        new
                        {
                            Id = 10,
                            ChangedAt = new DateTime(2024, 2, 10, 17, 25, 0, 0, DateTimeKind.Unspecified),
                            IssueId = 5,
                            StatusChange = "Resolved"
                        });
                });

            modelBuilder.Entity("Issue.Models.Issues", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOngoing")
                        .HasColumnType("bit");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("Issues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedById = 1,
                            Description = "Users can't log in",
                            IsOngoing = true,
                            ProjectId = 1,
                            Title = "Login Bug"
                        },
                        new
                        {
                            Id = 2,
                            CreatedById = 2,
                            Description = "Alignment issue",
                            IsOngoing = true,
                            ProjectId = 2,
                            Title = "UI Glitch"
                        },
                        new
                        {
                            Id = 3,
                            CreatedById = 3,
                            Description = "Slow response",
                            IsOngoing = false,
                            ProjectId = 3,
                            Title = "Performance Issue"
                        },
                        new
                        {
                            Id = 4,
                            CreatedById = 4,
                            Description = "Data leak risk",
                            IsOngoing = true,
                            ProjectId = 4,
                            Title = "Security Vulnerability"
                        },
                        new
                        {
                            Id = 5,
                            CreatedById = 5,
                            Description = "DB service down",
                            IsOngoing = false,
                            ProjectId = 5,
                            Title = "Database Crash"
                        },
                        new
                        {
                            Id = 6,
                            CreatedById = 6,
                            Description = "API requests failing",
                            IsOngoing = true,
                            ProjectId = 6,
                            Title = "API Timeout"
                        },
                        new
                        {
                            Id = 7,
                            CreatedById = 7,
                            Description = "High RAM usage",
                            IsOngoing = false,
                            ProjectId = 7,
                            Title = "Memory Leak"
                        },
                        new
                        {
                            Id = 8,
                            CreatedById = 8,
                            Description = "404 error",
                            IsOngoing = true,
                            ProjectId = 8,
                            Title = "Broken Link"
                        },
                        new
                        {
                            Id = 9,
                            CreatedById = 9,
                            Description = "Buttons not responsive",
                            IsOngoing = false,
                            ProjectId = 9,
                            Title = "Mobile UI Issue"
                        },
                        new
                        {
                            Id = 10,
                            CreatedById = 10,
                            Description = "CI/CD error",
                            IsOngoing = true,
                            ProjectId = 10,
                            Title = "Deployment Failure"
                        });
                });

            modelBuilder.Entity("Issue.Models.Projects", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "First project",
                            Name = "Project Alpha"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Second project",
                            Name = "Project Beta"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Third project",
                            Name = "Project Gamma"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Fourth project",
                            Name = "Project Delta"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Fifth project",
                            Name = "Project Epsilon"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Sixth project",
                            Name = "Project Zeta"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Seventh project",
                            Name = "Project Eta"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Eighth project",
                            Name = "Project Theta"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Ninth project",
                            Name = "Project Iota"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Tenth project",
                            Name = "Project Kappa"
                        });
                });

            modelBuilder.Entity("Issue.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "alice@example.com",
                            Name = "Alice Smith",
                            PasswordHash = "hashedpass1",
                            UserType = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Email = "bob@example.com",
                            Name = "Bob Johnson",
                            PasswordHash = "hashedpass2",
                            UserType = "Developer"
                        },
                        new
                        {
                            Id = 3,
                            Email = "charlie@example.com",
                            Name = "Charlie Brown",
                            PasswordHash = "hashedpass3",
                            UserType = "Reporter"
                        },
                        new
                        {
                            Id = 4,
                            Email = "david@example.com",
                            Name = "David Miller",
                            PasswordHash = "hashedpass4",
                            UserType = "Tester"
                        },
                        new
                        {
                            Id = 5,
                            Email = "eva@example.com",
                            Name = "Eva Green",
                            PasswordHash = "hashedpass5",
                            UserType = "Manager"
                        },
                        new
                        {
                            Id = 6,
                            Email = "frank@example.com",
                            Name = "Frank White",
                            PasswordHash = "hashedpass6",
                            UserType = "Developer"
                        },
                        new
                        {
                            Id = 7,
                            Email = "grace@example.com",
                            Name = "Grace Adams",
                            PasswordHash = "hashedpass7",
                            UserType = "Designer"
                        },
                        new
                        {
                            Id = 8,
                            Email = "hannah@example.com",
                            Name = "Hannah Lee",
                            PasswordHash = "hashedpass8",
                            UserType = "Admin"
                        },
                        new
                        {
                            Id = 9,
                            Email = "ian@example.com",
                            Name = "Ian Black",
                            PasswordHash = "hashedpass9",
                            UserType = "QA"
                        },
                        new
                        {
                            Id = 10,
                            Email = "jack@example.com",
                            Name = "Jack Taylor",
                            PasswordHash = "hashedpass10",
                            UserType = "Developer"
                        });
                });

            modelBuilder.Entity("Issue.Models.Attachments", b =>
                {
                    b.HasOne("Issue.Models.Issues", "Issue")
                        .WithMany("Attachments")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("Issue.Models.Comments", b =>
                {
                    b.HasOne("Issue.Models.Users", "CreatedBy")
                        .WithMany("Comments")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Issue.Models.Issues", "Issue")
                        .WithMany("Comments")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("Issue.Models.IssueHistory", b =>
                {
                    b.HasOne("Issue.Models.Issues", "Issue")
                        .WithMany("IssueHistories")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("Issue.Models.Issues", b =>
                {
                    b.HasOne("Issue.Models.Users", "CreatedBy")
                        .WithMany("IssuesCreated")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Issue.Models.Projects", "Project")
                        .WithMany("Issues")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Issue.Models.Issues", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Comments");

                    b.Navigation("IssueHistories");
                });

            modelBuilder.Entity("Issue.Models.Projects", b =>
                {
                    b.Navigation("Issues");
                });

            modelBuilder.Entity("Issue.Models.Users", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("IssuesCreated");
                });
#pragma warning restore 612, 618
        }
    }
}
